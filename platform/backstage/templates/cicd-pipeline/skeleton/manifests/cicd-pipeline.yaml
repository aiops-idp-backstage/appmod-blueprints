apiVersion: argoproj.io/v1alpha1
kind: EventSource
metadata:
  name: ${{values.appname}}-cicd
  namespace: ${{values.namespace}}
spec:
  service:
    ports:
      - port: 12000
        targetPort: 12000
  webhook:
    github:
      port: "12000"
      endpoint: /
      method: POST
      filter: 
        expression: 'indexOf(body.head_commit.message, "[SKIP CI]") == -1'
---
apiVersion: argoproj.io/v1alpha1
kind: Sensor
metadata:
  name: ${{values.appname}}-cicd
  namespace: ${{values.namespace}}
spec:
  template:
    serviceAccountName: ${{values.appname}}-operate-workflow-sa
  dependencies:
    - name: source-dep
      eventSourceName: ${{values.appname}}-cicd
      eventName: github
  triggers:
    - template:
        name: "${{values.appname}}-cicd-argo-workflow-trigger"
        argoWorkflow:
          operation: submit
          source:
            resource:
              apiVersion: argoproj.io/v1alpha1
              kind: Workflow
              metadata:
                generateName: ${{values.appname}}-cicd-flow-
                namespace: ${{values.namespace}}
                labels:
                  entity-id: ${{values.appname}}
              spec:
                serviceAccountName: ${{values.appname}}-cicd-sa
                entrypoint: run-cicd
                arguments:
                  parameters:
                    - name: apprepo
                      value: ${{values.hostname}}/gitea/giteaAdmin/${{values.appname}}
                    - name: branch
                      value: main
                    - name: tag-version
                      value: 0.0.1
                    - name: aws_region
                      value: ${{values.aws_region}}
                    - name: dockerfile_path
                      value: ${{values.dockerfile_path}}
                    - name: deployment_path
                      value: ${{values.deployment_path}}
                    - name: appname
                      value: ${{values.appname}}
                    - name: body
                      value: "{{ .Input.body }}"
                    - name: headers
                      value: "{{ .Input.header }}"
                volumeClaimTemplates:
                - metadata:
                    name: workdir
                  spec:
                    accessModes: ["ReadWriteOnce"]
                    storageClassName: gp3
                    resources:
                      requests:
                        storage: 256Mi
                templates:
                - name: run-cicd
                  steps:
                  - - name: run-cicd
                      templateRef:
                        name: run-cicd-template
                        template: run-cicd
                      arguments:
                        parameters:
                        - name: appname
                          value: "{{workflow.parameters.appname}}"
                        - name: apprepo
                          value: "{{workflow.parameters.apprepo}}"
                        - name: tag-version
                          value: "{{workflow.parameters.tag-version}}"
                        - name: branch
                          value: "{{workflow.parameters.branch}}"
                        - name: aws_region
                          value: "{{workflow.parameters.aws_region}}"
                        - name: dockerfile_path
                          value: "{{workflow.parameters.dockerfile_path}}"
                        - name: deployment_path
                          value: "{{workflow.parameters.deployment_path}}"
          parameters:
            - src:
                dependencyName: source-dep
                dataTemplate: "{{ .Input.body.head_commit.id }}"
              dest: spec.arguments.parameters.2.value
            - src:
                dependencyName: source-dep
                dataKey: body
              dest: spec.arguments.parameters.7.value
            - src:
                dependencyName: source-dep
                dataKey: header
              dest: spec.arguments.parameters.8.value
---
apiVersion: v1
kind: Service
metadata:
  name: ${{values.appname}}-cicd-webhook-es-svc
  namespace: ${{values.namespace}}
  labels:
    app: argo-events
    app.kubernetes.io/name: argo-events
    app.kubernetes.io/instance: my-argo-events
spec:
  ports:
  - port: 12000
    protocol: TCP
    targetPort: 12000
  selector:
    eventsource-name: ${{values.appname}}-cicd
  type: ClusterIP

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: ${{values.appname}}-cicd-webhook-es-ing
  namespace: ${{values.namespace}}
  annotations:
    nginx.ingress.kubernetes.io/proxy-body-size: 512m
    nginx.ingress.kubernetes.io/use-regex: "true"
    nginx.ingress.kubernetes.io/rewrite-target: /$2
spec:
  ingressClassName: nginx
  rules:
    - host: ${{values.hostname}}
      http:
        paths:
          - backend:
              service:
                name: ${{values.appname}}-cicd-webhook-es-svc
                port:
                  number: 12000
            path: /argo-events/${{values.appname}}(/|$)(.*)
            pathType: ImplementationSpecific
    - host: localhost
      http:
        paths:
          - backend:
              service:
                name: ${{values.appname}}-cicd-webhook-es-svc
                port:
                  number: 12000
            path: /argo-events/${{values.appname}}(/|$)(.*)
            pathType: ImplementationSpecific
